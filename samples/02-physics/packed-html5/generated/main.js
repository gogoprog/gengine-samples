// Generated by Haxe 3.4.2
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ash_core_System = function() {
	this.priority = 0;
};
ash_core_System.__name__ = ["ash","core","System"];
ash_core_System.prototype = {
	addToEngine: function(engine) {
	}
	,removeFromEngine: function(engine) {
	}
	,update: function(time) {
	}
	,__class__: ash_core_System
};
var FactorySystem = function() {
	ash_core_System.call(this);
};
FactorySystem.__name__ = ["FactorySystem"];
FactorySystem.__super__ = ash_core_System;
FactorySystem.prototype = $extend(ash_core_System.prototype,{
	addToEngine: function(_engine) {
		this.engine = _engine;
	}
	,spawnCrate: function(size,position) {
		var hsize = size * 0.5;
		var e = new gengine_Entity();
		e.add(new gengine_components_StaticSprite2D());
		var tmp = e.get(gengine_components_StaticSprite2D);
		var tmp1 = gengine.getResourceCache().getSprite2D("crate.png",true);
		tmp.setSprite(tmp1);
		var tmp2 = e.get(gengine_components_StaticSprite2D);
		var this1 = Module.Vector2(-hsize,-hsize);
		var this2 = Module.Vector2(hsize,hsize);
		tmp2.setDrawRect(Module.Rect(this1,this2));
		e.add(new gengine_components_RigidBody2D());
		e.get(gengine_components_RigidBody2D).setBodyType(2);
		e.add(new gengine_components_CollisionBox2D());
		var tmp3 = e.get(gengine_components_CollisionBox2D);
		var this3 = Module.Vector2(size,size);
		tmp3.setSize(this3);
		e.get(gengine_components_CollisionBox2D).setDensity(1);
		e.get(gengine_components_CollisionBox2D).setFriction(0.5);
		e.get(gengine_components_CollisionBox2D).setRestitution(0.1);
		e.set_position(position);
		this.engine.addEntity(e);
	}
	,__class__: FactorySystem
});
var InputSystem = function(_camera) {
	ash_core_System.call(this);
	this.camera = _camera;
};
InputSystem.__name__ = ["InputSystem"];
InputSystem.__super__ = ash_core_System;
InputSystem.prototype = $extend(ash_core_System.prototype,{
	addToEngine: function(_engine) {
		this.engine = _engine;
	}
	,update: function(dt) {
		var input = gengine.getInput();
		var mousePosition = input.getMousePosition();
		var this1 = Module.Vector2(mousePosition.x / 800,mousePosition.y / 600);
		var mouseScreenPosition = this1;
		var mouseWorldPosition = this.camera;
		var this2 = Module.Vector3(mouseScreenPosition.x,mouseScreenPosition.y,0);
		var mouseWorldPosition1 = mouseWorldPosition.screenToWorldPoint(this2);
		if(input.getScancodePress(41)) {
			gengine.exit();
		}
		if(input.getMouseButtonPress(1)) {
			this.engine.getSystem(FactorySystem).spawnCrate(64,mouseWorldPosition1);
		}
		if(input.getMouseButtonPress(4)) {
			var result = new Module.PhysicsRaycastResult2D();
			var tmp = this.sceneEntity.get(gengine_components_PhysicsWorld2D);
			var this3 = Module.Vector2(mouseWorldPosition1.x,mouseWorldPosition1.y);
			var this4 = Module.Vector2(mouseWorldPosition1.x,mouseWorldPosition1.y - 20000);
			tmp.raycastSingle(result,this3,this4);
			console.log("Distance below cursor to obstacle : " + result.distance);
		}
	}
	,__class__: InputSystem
});
var Application = function() { };
Application.__name__ = ["Application"];
Application.init = function() {
	gengine.setWindowSize(Module.IntVector2(800,600));
	gengine.setWindowTitle("02-physics");
};
Application.start = function(engine) {
	var cameraEntity = new gengine_Entity();
	cameraEntity.add(new gengine_components_Camera());
	var tmp = cameraEntity.get(gengine_components_Camera);
	var this1 = Module.Vector2(800,600);
	tmp.setOrthoSize(this1);
	cameraEntity.get(gengine_components_Camera).setOrthographic(true);
	engine.addEntity(cameraEntity);
	engine.addSystem(new InputSystem(cameraEntity.get(gengine_components_Camera)),0);
	engine.addSystem(new FactorySystem(),0);
	var sceneEntity = new gengine_Entity(gengine.getScene());
	sceneEntity.add(new gengine_components_PhysicsWorld2D());
	var tmp1 = sceneEntity.get(gengine_components_PhysicsWorld2D);
	var this2 = Module.Vector2(0,-100);
	tmp1.setGravity(this2);
	sceneEntity.get(gengine_components_PhysicsWorld2D).setSubStepping(false);
	sceneEntity.get(gengine_components_PhysicsWorld2D).setContinuousPhysics(false);
	engine.getSystem(InputSystem).sceneEntity = sceneEntity;
	var e = new gengine_Entity();
	e.add(new gengine_components_RigidBody2D());
	e.add(new gengine_components_CollisionBox2D());
	var tmp2 = e.get(gengine_components_CollisionBox2D);
	var this3 = Module.Vector2(512,512);
	tmp2.setSize(this3);
	e.add(new gengine_components_StaticSprite2D());
	var tmp3 = e.get(gengine_components_StaticSprite2D);
	var tmp4 = gengine.getResourceCache().getSprite2D("crate.png",true);
	tmp3.setSprite(tmp4);
	var tmp5 = e.get(gengine_components_StaticSprite2D);
	var this4 = Module.Vector2(-256,-256);
	var this5 = Module.Vector2(256,256);
	tmp5.setDrawRect(Module.Rect(this4,this5));
	var this6 = Module.Vector3(0,-400,0);
	e.set_position(this6);
	engine.addEntity(e);
	gengine.getRenderer().getDefaultZone().setFogColor(Module.Color(0.5,0.5,0.5,1));
	var tmp6 = engine.getSystem(FactorySystem);
	var this7 = Module.Vector3(0,300,0);
	tmp6.spawnCrate(64,this7);
	var result = new Module.PhysicsRaycastResult2D();
	var tmp7 = sceneEntity.get(gengine_components_PhysicsWorld2D);
	var this8 = Module.Vector2(0,0);
	var this9 = Module.Vector2(0,-2000);
	tmp7.raycastSingle(result,this8,this9);
};
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
Math.__name__ = ["Math"];
var Reflect = function() { };
Reflect.__name__ = ["Reflect"];
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var ash_ClassMap = function() {
	this.keyMap = new haxe_ds_StringMap();
	this.valueMap = new haxe_ds_StringMap();
};
ash_ClassMap.__name__ = ["ash","ClassMap"];
ash_ClassMap.__interfaces__ = [haxe_IMap];
ash_ClassMap.prototype = {
	get: function(k) {
		var _this = this.valueMap;
		var key = Type.getClassName(k);
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,set: function(k,v) {
		var name = Type.getClassName(k);
		var _this = this.keyMap;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,k);
		} else {
			_this.h[name] = k;
		}
		var _this1 = this.valueMap;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,v);
		} else {
			_this1.h[name] = v;
		}
	}
	,exists: function(k) {
		var _this = this.valueMap;
		var key = Type.getClassName(k);
		if(__map_reserved[key] != null) {
			return _this.existsReserved(key);
		} else {
			return _this.h.hasOwnProperty(key);
		}
	}
	,remove: function(k) {
		var name = Type.getClassName(k);
		this.keyMap.remove(name);
		return this.valueMap.remove(name);
	}
	,keys: function() {
		var _this = this.keyMap;
		return new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	}
	,iterator: function() {
		var _this = this.valueMap;
		return new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	}
	,toString: function() {
		return this.valueMap.toString();
	}
	,__class__: ash_ClassMap
};
var ash_GenericListIterator = function(head) {
	this.previous = { next : head};
};
ash_GenericListIterator.__name__ = ["ash","GenericListIterator"];
ash_GenericListIterator.prototype = {
	hasNext: function() {
		return this.previous.next != null;
	}
	,next: function() {
		var node = this.previous.next;
		this.previous = node;
		return node;
	}
	,__class__: ash_GenericListIterator
};
var ash_core_IFamily = function() { };
ash_core_IFamily.__name__ = ["ash","core","IFamily"];
ash_core_IFamily.prototype = {
	__class__: ash_core_IFamily
};
var ash_core_ComponentMatchingFamily = function(nodeClass,engine) {
	this.nodeClass = nodeClass;
	this.engine = engine;
	this.init();
};
ash_core_ComponentMatchingFamily.__name__ = ["ash","core","ComponentMatchingFamily"];
ash_core_ComponentMatchingFamily.__interfaces__ = [ash_core_IFamily];
ash_core_ComponentMatchingFamily.prototype = {
	init: function() {
		this.nodeList = new ash_core_NodeList();
		this.entities = new haxe_ds_ObjectMap();
		this.components = this.nodeClass._getComponents();
		this.nodePool = new ash_core_NodePool(this.nodeClass,this.components);
	}
	,newEntity: function(entity) {
		this.addIfMatch(entity);
	}
	,componentAddedToEntity: function(entity,componentClass) {
		this.addIfMatch(entity);
	}
	,componentRemovedFromEntity: function(entity,componentClass) {
		var _this = this.components.valueMap;
		var key = Type.getClassName(componentClass);
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			this.removeIfMatch(entity);
		}
	}
	,removeEntity: function(entity) {
		this.removeIfMatch(entity);
	}
	,addIfMatch: function(entity) {
		if(this.entities.h.__keys__[entity.__id__] == null) {
			var _this = this.components.keyMap;
			var componentClass = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
			while(componentClass.hasNext()) {
				var componentClass1 = componentClass.next();
				if(!entity.has(componentClass1)) {
					return;
				}
			}
			var node = this.nodePool.get();
			node.entity = entity;
			var _this1 = this.components.keyMap;
			var componentClass2 = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
			while(componentClass2.hasNext()) {
				var componentClass3 = componentClass2.next();
				var _this2 = this.components.valueMap;
				var key = Type.getClassName(componentClass3);
				node[__map_reserved[key] != null ? _this2.getReserved(key) : _this2.h[key]] = entity.get(componentClass3);
			}
			this.entities.set(entity,node);
			this.nodeList.add(node);
		}
	}
	,removeIfMatch: function(entity) {
		if(this.entities.h.__keys__[entity.__id__] != null) {
			var node = this.entities.h[entity.__id__];
			this.entities.remove(entity);
			this.nodeList.remove(node);
			if(this.engine.updating) {
				this.nodePool.cache(node);
				this.engine.updateComplete.add($bind(this,this.releaseNodePoolCache));
			} else {
				this.nodePool.dispose(node);
			}
		}
	}
	,releaseNodePoolCache: function() {
		this.engine.updateComplete.remove($bind(this,this.releaseNodePoolCache));
		this.nodePool.releaseCache();
	}
	,cleanUp: function() {
		var _g_previous = { next : this.nodeList.head};
		while(_g_previous.next != null) {
			var node = _g_previous.next;
			_g_previous = node;
			var node1 = node;
			this.entities.remove(node1.entity);
		}
		this.nodeList.removeAll();
	}
	,__class__: ash_core_ComponentMatchingFamily
};
var ash_core_Engine = function() {
	this.familyClass = ash_core_ComponentMatchingFamily;
	this.entityList = new ash_core_EntityList();
	this.entityNames = new haxe_ds_StringMap();
	this.systemList = new ash_core_SystemList();
	this.families = new ash_ClassMap();
	this.entityAdded = new ash_signals_Signal1();
	this.entityRemoved = new ash_signals_Signal1();
	this.updateComplete = new ash_signals_Signal0();
	this.updating = false;
};
ash_core_Engine.__name__ = ["ash","core","Engine"];
ash_core_Engine.prototype = {
	addEntity: function(entity) {
		var key = entity.name;
		var _this = this.entityNames;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			throw new js__$Boot_HaxeError("The entity name " + entity.name + " is already in use by another entity.");
		}
		this.entityList.add(entity);
		var key1 = entity.name;
		var _this1 = this.entityNames;
		if(__map_reserved[key1] != null) {
			_this1.setReserved(key1,entity);
		} else {
			_this1.h[key1] = entity;
		}
		entity.componentAdded.add($bind(this,this.componentAdded));
		entity.componentRemoved.add($bind(this,this.componentRemoved));
		entity.nameChanged.add($bind(this,this.entityNameChanged));
		var _this2 = this.families.valueMap;
		var family = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
		while(family.hasNext()) {
			var family1 = family.next();
			family1.newEntity(entity);
		}
		this.entityAdded.dispatch(entity);
	}
	,removeEntity: function(entity) {
		entity.componentAdded.remove($bind(this,this.componentAdded));
		entity.componentRemoved.remove($bind(this,this.componentRemoved));
		entity.nameChanged.remove($bind(this,this.entityNameChanged));
		var _this = this.families.valueMap;
		var family = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(family.hasNext()) {
			var family1 = family.next();
			family1.removeEntity(entity);
		}
		this.entityNames.remove(entity.name);
		this.entityList.remove(entity);
		this.entityRemoved.dispatch(entity);
	}
	,entityNameChanged: function(entity,oldName) {
		var _this = this.entityNames;
		if((__map_reserved[oldName] != null ? _this.getReserved(oldName) : _this.h[oldName]) == entity) {
			this.entityNames.remove(oldName);
			var key = entity.name;
			var _this1 = this.entityNames;
			if(__map_reserved[key] != null) {
				_this1.setReserved(key,entity);
			} else {
				_this1.h[key] = entity;
			}
		}
	}
	,getEntityByName: function(name) {
		var _this = this.entityNames;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,removeAllEntities: function() {
		while(this.entityList.head != null) this.removeEntity(this.entityList.head);
	}
	,get_entities: function() {
		return this.entityList;
	}
	,componentAdded: function(entity,componentClass) {
		var _this = this.families.valueMap;
		var family = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(family.hasNext()) {
			var family1 = family.next();
			family1.componentAddedToEntity(entity,componentClass);
		}
	}
	,componentRemoved: function(entity,componentClass) {
		var _this = this.families.valueMap;
		var family = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(family.hasNext()) {
			var family1 = family.next();
			family1.componentRemovedFromEntity(entity,componentClass);
		}
	}
	,getNodeList: function(nodeClass) {
		var _this = this.families.valueMap;
		var key = Type.getClassName(nodeClass);
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.families.valueMap;
			var key1 = Type.getClassName(nodeClass);
			return (__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]).nodeList;
		}
		var family = Type.createInstance(this.familyClass,[nodeClass,this]);
		var _this2 = this.families;
		var name = Type.getClassName(nodeClass);
		var _this3 = _this2.keyMap;
		if(__map_reserved[name] != null) {
			_this3.setReserved(name,nodeClass);
		} else {
			_this3.h[name] = nodeClass;
		}
		var _this4 = _this2.valueMap;
		if(__map_reserved[name] != null) {
			_this4.setReserved(name,family);
		} else {
			_this4.h[name] = family;
		}
		var _g_previous = { next : this.entityList.head};
		while(_g_previous.next != null) {
			var node = _g_previous.next;
			_g_previous = node;
			var entity = node;
			family.newEntity(entity);
		}
		return family.nodeList;
	}
	,releaseNodeList: function(nodeClass) {
		var _this = this.families.valueMap;
		var key = Type.getClassName(nodeClass);
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.families.valueMap;
			var key1 = Type.getClassName(nodeClass);
			(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]).cleanUp();
			var _this2 = this.families;
			var name = Type.getClassName(nodeClass);
			_this2.keyMap.remove(name);
			_this2.valueMap.remove(name);
		}
	}
	,addSystem: function(system,priority) {
		if(this.updating) {
			throw new js__$Boot_HaxeError("Systems cannot be added during engine update. The updateComplete signal should be used.");
		}
		system.priority = priority;
		system.addToEngine(this);
		this.systemList.add(system);
	}
	,getSystem: function(type) {
		return this.systemList.get(type);
	}
	,get_systems: function() {
		return this.systemList;
	}
	,removeSystem: function(system) {
		if(this.updating) {
			throw new js__$Boot_HaxeError("Systems cannot be removed during engine update. The updateComplete signal should be used.");
		}
		this.systemList.remove(system);
		system.removeFromEngine(this);
	}
	,removeAllSystems: function() {
		while(this.systemList.head != null) {
			var system = this.systemList.head;
			this.systemList.head = this.systemList.head.next;
			system.previous = null;
			system.next = null;
			system.removeFromEngine(this);
			this.removeSystem(this.systemList.head);
		}
		this.systemList.tail = null;
	}
	,update: function(time) {
		this.updating = true;
		var _g_previous = { next : this.systemList.head};
		while(_g_previous.next != null) {
			var node = _g_previous.next;
			_g_previous = node;
			var system = node;
			system.update(time);
		}
		this.updating = false;
		this.updateComplete.dispatch();
	}
	,__class__: ash_core_Engine
};
var ash_core_Entity = function(name) {
	if(name == null) {
		name = "";
	}
	this.componentAdded = new ash_signals_Signal2();
	this.componentRemoved = new ash_signals_Signal2();
	this.nameChanged = new ash_signals_Signal2();
	this.components = new ash_ClassMap();
	if(name != "") {
		if(this.name != name) {
			var previous = this.name;
			this.name = name;
			this.nameChanged.dispatch(this,previous);
		}
	} else {
		var value = "_entity" + ++ash_core_Entity.nameCount;
		if(this.name != value) {
			var previous1 = this.name;
			this.name = value;
			this.nameChanged.dispatch(this,previous1);
		}
	}
};
ash_core_Entity.__name__ = ["ash","core","Entity"];
ash_core_Entity.prototype = {
	set_name: function(value) {
		if(this.name != value) {
			var previous = this.name;
			this.name = value;
			this.nameChanged.dispatch(this,previous);
		}
		return value;
	}
	,add: function(component,componentClass) {
		if(componentClass == null) {
			if(component == null) {
				componentClass = null;
			} else {
				componentClass = js_Boot.getClass(component);
			}
		}
		var _this = this.components.valueMap;
		var key = Type.getClassName(componentClass);
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			this.remove(componentClass);
		}
		var _this1 = this.components;
		var name = Type.getClassName(componentClass);
		var _this2 = _this1.keyMap;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,componentClass);
		} else {
			_this2.h[name] = componentClass;
		}
		var _this3 = _this1.valueMap;
		if(__map_reserved[name] != null) {
			_this3.setReserved(name,component);
		} else {
			_this3.h[name] = component;
		}
		this.componentAdded.dispatch(this,componentClass);
		return this;
	}
	,remove: function(componentClass) {
		var _this = this.components.valueMap;
		var key = Type.getClassName(componentClass);
		var component = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(component != null) {
			var _this1 = this.components;
			var name = Type.getClassName(componentClass);
			_this1.keyMap.remove(name);
			_this1.valueMap.remove(name);
			this.componentRemoved.dispatch(this,componentClass);
			return component;
		}
		return null;
	}
	,get: function(componentClass) {
		var _this = this.components.valueMap;
		var key = Type.getClassName(componentClass);
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,getAll: function() {
		var componentArray = [];
		var _this = this.components.valueMap;
		var component = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(component.hasNext()) {
			var component1 = component.next();
			componentArray.push(component1);
		}
		return componentArray;
	}
	,has: function(componentClass) {
		var _this = this.components.valueMap;
		var key = Type.getClassName(componentClass);
		if(__map_reserved[key] != null) {
			return _this.existsReserved(key);
		} else {
			return _this.h.hasOwnProperty(key);
		}
	}
	,__class__: ash_core_Entity
};
var ash_core_EntityList = function() {
};
ash_core_EntityList.__name__ = ["ash","core","EntityList"];
ash_core_EntityList.prototype = {
	add: function(entity) {
		if(this.head == null) {
			this.head = this.tail = entity;
			entity.next = entity.previous = null;
		} else {
			this.tail.next = entity;
			entity.previous = this.tail;
			entity.next = null;
			this.tail = entity;
		}
	}
	,remove: function(entity) {
		if(this.head == entity) {
			this.head = this.head.next;
		}
		if(this.tail == entity) {
			this.tail = this.tail.previous;
		}
		if(entity.previous != null) {
			entity.previous.next = entity.next;
		}
		if(entity.next != null) {
			entity.next.previous = entity.previous;
		}
	}
	,removeAll: function() {
		while(this.head != null) {
			var entity = this.head;
			this.head = this.head.next;
			entity.previous = null;
			entity.next = null;
		}
		this.tail = null;
	}
	,iterator: function() {
		return new ash_GenericListIterator(this.head);
	}
	,__class__: ash_core_EntityList
};
var ash_core_Node = function() { };
ash_core_Node.__name__ = ["ash","core","Node"];
ash_core_Node.prototype = {
	__class__: ash_core_Node
};
var ash_core_NodeList = function() {
	this.nodeAdded = new ash_signals_Signal1();
	this.nodeRemoved = new ash_signals_Signal1();
};
ash_core_NodeList.__name__ = ["ash","core","NodeList"];
ash_core_NodeList.prototype = {
	add: function(node) {
		if(this.head == null) {
			this.head = this.tail = node;
			node.next = node.previous = null;
		} else {
			this.tail.next = node;
			node.previous = this.tail;
			node.next = null;
			this.tail = node;
		}
		this.nodeAdded.dispatch(node);
	}
	,remove: function(node) {
		if(this.head == node) {
			this.head = this.head.next;
		}
		if(this.tail == node) {
			this.tail = this.tail.previous;
		}
		if(node.previous != null) {
			node.previous.next = node.next;
		}
		if(node.next != null) {
			node.next.previous = node.previous;
		}
		this.nodeRemoved.dispatch(node);
	}
	,removeAll: function() {
		while(this.head != null) {
			var node = this.head;
			this.head = this.head.next;
			node.previous = null;
			node.next = null;
			this.nodeRemoved.dispatch(node);
		}
		this.tail = null;
	}
	,get_empty: function() {
		return this.head == null;
	}
	,iterator: function() {
		return new ash_GenericListIterator(this.head);
	}
	,swap: function(node1,node2) {
		if(node1.previous == node2) {
			node1.previous = node2.previous;
			node2.previous = node1;
			node2.next = node1.next;
			node1.next = node2;
		} else if(node2.previous == node1) {
			node2.previous = node1.previous;
			node1.previous = node2;
			node1.next = node2.next;
			node2.next = node1;
		} else {
			var temp = node1.previous;
			node1.previous = node2.previous;
			node2.previous = temp;
			temp = node1.next;
			node1.next = node2.next;
			node2.next = temp;
		}
		if(this.head == node1) {
			this.head = node2;
		} else if(this.head == node2) {
			this.head = node1;
		}
		if(this.tail == node1) {
			this.tail = node2;
		} else if(this.tail == node2) {
			this.tail = node1;
		}
		if(node1.previous != null) {
			node1.previous.next = node1;
		}
		if(node2.previous != null) {
			node2.previous.next = node2;
		}
		if(node1.next != null) {
			node1.next.previous = node1;
		}
		if(node2.next != null) {
			node2.next.previous = node2;
		}
	}
	,insertionSort: function(sortFunction) {
		if(this.head == this.tail) {
			return;
		}
		var remains = this.head.next;
		var node = remains;
		while(node != null) {
			remains = node.next;
			var other = node.previous;
			while(other != null) {
				if(sortFunction(node,other) >= 0) {
					if(node != other.next) {
						if(this.tail == node) {
							this.tail = node.previous;
						}
						node.previous.next = node.next;
						if(node.next != null) {
							node.next.previous = node.previous;
						}
						node.next = other.next;
						node.previous = other;
						node.next.previous = node;
						other.next = node;
					}
					break;
				}
				other = other.previous;
			}
			if(other == null) {
				if(this.tail == node) {
					this.tail = node.previous;
				}
				node.previous.next = node.next;
				if(node.next != null) {
					node.next.previous = node.previous;
				}
				node.next = this.head;
				this.head.previous = node;
				node.previous = null;
				this.head = node;
			}
			node = remains;
		}
	}
	,mergeSort: function(sortFunction) {
		if(this.head == this.tail) {
			return;
		}
		var lists = [];
		var start = this.head;
		var end;
		while(start != null) {
			end = start;
			while(end.next != null && sortFunction(end,end.next) <= 0) end = end.next;
			var next = end.next;
			start.previous = end.next = null;
			lists.push(start);
			start = next;
		}
		while(lists.length > 1) lists.push(this.merge(lists.shift(),lists.shift(),sortFunction));
		this.tail = this.head = lists[0];
		while(this.tail.next != null) this.tail = this.tail.next;
	}
	,merge: function(head1,head2,sortFunction) {
		var node;
		var head;
		if(sortFunction(head1,head2) <= 0) {
			node = head1;
			head = node;
			head1 = head1.next;
		} else {
			node = head2;
			head = node;
			head2 = head2.next;
		}
		while(head1 != null && head2 != null) if(sortFunction(head1,head2) <= 0) {
			node.next = head1;
			head1.previous = node;
			node = head1;
			head1 = head1.next;
		} else {
			node.next = head2;
			head2.previous = node;
			node = head2;
			head2 = head2.next;
		}
		if(head1 != null) {
			node.next = head1;
			head1.previous = node;
		} else {
			node.next = head2;
			head2.previous = node;
		}
		return head;
	}
	,__class__: ash_core_NodeList
};
var ash_core_NodePool = function(nodeClass,components) {
	this.nodeClass = nodeClass;
	this.components = components;
};
ash_core_NodePool.__name__ = ["ash","core","NodePool"];
ash_core_NodePool.prototype = {
	get: function() {
		if(this.tail != null) {
			var node = this.tail;
			this.tail = this.tail.previous;
			node.previous = null;
			return node;
		} else {
			return Type.createEmptyInstance(this.nodeClass);
		}
	}
	,dispose: function(node) {
		var _this = this.components.valueMap;
		var componentName = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(componentName.hasNext()) {
			var componentName1 = componentName.next();
			node[componentName1] = null;
		}
		node.entity = null;
		node.next = null;
		node.previous = this.tail;
		this.tail = node;
	}
	,cache: function(node) {
		node.previous = this.cacheTail;
		this.cacheTail = node;
	}
	,releaseCache: function() {
		while(this.cacheTail != null) {
			var node = this.cacheTail;
			this.cacheTail = node.previous;
			node.next = null;
			node.previous = this.tail;
			this.tail = node;
		}
	}
	,__class__: ash_core_NodePool
};
var ash_core_SystemList = function() {
};
ash_core_SystemList.__name__ = ["ash","core","SystemList"];
ash_core_SystemList.prototype = {
	add: function(system) {
		if(this.head == null) {
			this.head = this.tail = system;
			system.next = system.previous = null;
		} else {
			var node = this.tail;
			while(node != null) {
				if(node.priority <= system.priority) {
					break;
				}
				node = node.previous;
			}
			if(node == this.tail) {
				this.tail.next = system;
				system.previous = this.tail;
				system.next = null;
				this.tail = system;
			} else if(node == null) {
				system.next = this.head;
				system.previous = null;
				this.head.previous = system;
				this.head = system;
			} else {
				system.next = node.next;
				system.previous = node;
				node.next.previous = system;
				node.next = system;
			}
		}
	}
	,remove: function(system) {
		if(this.head == system) {
			this.head = this.head.next;
		}
		if(this.tail == system) {
			this.tail = this.tail.previous;
		}
		if(system.previous != null) {
			system.previous.next = system.next;
		}
		if(system.next != null) {
			system.next.previous = system.previous;
		}
	}
	,removeAll: function() {
		while(this.head != null) {
			var system = this.head;
			this.head = this.head.next;
			system.previous = null;
			system.next = null;
		}
		this.tail = null;
	}
	,get: function(type) {
		var system = this.head;
		while(system != null) {
			if(js_Boot.__instanceof(system,type)) {
				return system;
			}
			system = system.next;
		}
		return null;
	}
	,iterator: function() {
		return new ash_GenericListIterator(this.head);
	}
	,__class__: ash_core_SystemList
};
var ash_signals_ListenerNode = function() {
};
ash_signals_ListenerNode.__name__ = ["ash","signals","ListenerNode"];
ash_signals_ListenerNode.prototype = {
	__class__: ash_signals_ListenerNode
};
var ash_signals_ListenerNodePool = function() {
};
ash_signals_ListenerNodePool.__name__ = ["ash","signals","ListenerNodePool"];
ash_signals_ListenerNodePool.prototype = {
	get: function() {
		if(this.tail != null) {
			var node = this.tail;
			this.tail = this.tail.previous;
			node.previous = null;
			return node;
		} else {
			return new ash_signals_ListenerNode();
		}
	}
	,dispose: function(node) {
		node.listener = null;
		node.once = false;
		node.next = null;
		node.previous = this.tail;
		this.tail = node;
	}
	,cache: function(node) {
		node.listener = null;
		node.previous = this.cacheTail;
		this.cacheTail = node;
	}
	,releaseCache: function() {
		while(this.cacheTail != null) {
			var node = this.cacheTail;
			this.cacheTail = node.previous;
			node.next = null;
			node.previous = this.tail;
			this.tail = node;
		}
	}
	,__class__: ash_signals_ListenerNodePool
};
var ash_signals_SignalBase = function() {
	this.listenerNodePool = new ash_signals_ListenerNodePool();
	this.numListeners = 0;
};
ash_signals_SignalBase.__name__ = ["ash","signals","SignalBase"];
ash_signals_SignalBase.prototype = {
	startDispatch: function() {
		this.dispatching = true;
	}
	,endDispatch: function() {
		this.dispatching = false;
		if(this.toAddHead != null) {
			if(this.head == null) {
				this.head = this.toAddHead;
				this.tail = this.toAddTail;
			} else {
				this.tail.next = this.toAddHead;
				this.toAddHead.previous = this.tail;
				this.tail = this.toAddTail;
			}
			this.toAddHead = null;
			this.toAddTail = null;
		}
		this.listenerNodePool.releaseCache();
	}
	,getNode: function(listener) {
		var node = this.head;
		while(node != null) {
			if(Reflect.compareMethods(node.listener,listener)) {
				break;
			}
			node = node.next;
		}
		if(node == null) {
			node = this.toAddHead;
			while(node != null) {
				if(Reflect.compareMethods(node.listener,listener)) {
					break;
				}
				node = node.next;
			}
		}
		return node;
	}
	,nodeExists: function(listener) {
		var node = this.head;
		while(node != null) {
			if(Reflect.compareMethods(node.listener,listener)) {
				break;
			}
			node = node.next;
		}
		if(node == null) {
			node = this.toAddHead;
			while(node != null) {
				if(Reflect.compareMethods(node.listener,listener)) {
					break;
				}
				node = node.next;
			}
		}
		return node != null;
	}
	,add: function(listener) {
		var node = this.head;
		while(node != null) {
			if(Reflect.compareMethods(node.listener,listener)) {
				break;
			}
			node = node.next;
		}
		if(node == null) {
			node = this.toAddHead;
			while(node != null) {
				if(Reflect.compareMethods(node.listener,listener)) {
					break;
				}
				node = node.next;
			}
		}
		if(node != null) {
			return;
		}
		var node1 = this.listenerNodePool.get();
		node1.listener = listener;
		this.addNode(node1);
	}
	,addOnce: function(listener) {
		var node = this.head;
		while(node != null) {
			if(Reflect.compareMethods(node.listener,listener)) {
				break;
			}
			node = node.next;
		}
		if(node == null) {
			node = this.toAddHead;
			while(node != null) {
				if(Reflect.compareMethods(node.listener,listener)) {
					break;
				}
				node = node.next;
			}
		}
		if(node != null) {
			return;
		}
		var node1 = this.listenerNodePool.get();
		node1.listener = listener;
		node1.once = true;
		this.addNode(node1);
	}
	,addNode: function(node) {
		if(this.dispatching) {
			if(this.toAddHead == null) {
				this.toAddHead = this.toAddTail = node;
			} else {
				this.toAddTail.next = node;
				node.previous = this.toAddTail;
				this.toAddTail = node;
			}
		} else if(this.head == null) {
			this.head = this.tail = node;
		} else {
			this.tail.next = node;
			node.previous = this.tail;
			this.tail = node;
		}
		this.numListeners++;
	}
	,remove: function(listener) {
		var node = this.head;
		while(node != null) {
			if(Reflect.compareMethods(node.listener,listener)) {
				break;
			}
			node = node.next;
		}
		if(node == null) {
			node = this.toAddHead;
			while(node != null) {
				if(Reflect.compareMethods(node.listener,listener)) {
					break;
				}
				node = node.next;
			}
		}
		var node1 = node;
		if(node1 != null) {
			if(this.head == node1) {
				this.head = this.head.next;
			}
			if(this.tail == node1) {
				this.tail = this.tail.previous;
			}
			if(this.toAddHead == node1) {
				this.toAddHead = this.toAddHead.next;
			}
			if(this.toAddTail == node1) {
				this.toAddTail = this.toAddTail.previous;
			}
			if(node1.previous != null) {
				node1.previous.next = node1.next;
			}
			if(node1.next != null) {
				node1.next.previous = node1.previous;
			}
			if(this.dispatching) {
				this.listenerNodePool.cache(node1);
			} else {
				this.listenerNodePool.dispose(node1);
			}
			this.numListeners--;
		}
	}
	,removeAll: function() {
		while(this.head != null) {
			var node = this.head;
			this.head = this.head.next;
			this.listenerNodePool.dispose(node);
		}
		this.tail = null;
		this.toAddHead = null;
		this.toAddTail = null;
		this.numListeners = 0;
	}
	,__class__: ash_signals_SignalBase
};
var ash_signals_Signal0 = function() {
	ash_signals_SignalBase.call(this);
};
ash_signals_Signal0.__name__ = ["ash","signals","Signal0"];
ash_signals_Signal0.__super__ = ash_signals_SignalBase;
ash_signals_Signal0.prototype = $extend(ash_signals_SignalBase.prototype,{
	dispatch: function() {
		this.startDispatch();
		var node = this.head;
		while(node != null) {
			node.listener();
			if(node.once) {
				this.remove(node.listener);
			}
			node = node.next;
		}
		this.endDispatch();
	}
	,__class__: ash_signals_Signal0
});
var ash_signals_Signal1 = function() {
	ash_signals_SignalBase.call(this);
};
ash_signals_Signal1.__name__ = ["ash","signals","Signal1"];
ash_signals_Signal1.__super__ = ash_signals_SignalBase;
ash_signals_Signal1.prototype = $extend(ash_signals_SignalBase.prototype,{
	dispatch: function(object1) {
		this.startDispatch();
		var node = this.head;
		while(node != null) {
			node.listener(object1);
			if(node.once) {
				this.remove(node.listener);
			}
			node = node.next;
		}
		this.endDispatch();
	}
	,__class__: ash_signals_Signal1
});
var ash_signals_Signal2 = function() {
	ash_signals_SignalBase.call(this);
};
ash_signals_Signal2.__name__ = ["ash","signals","Signal2"];
ash_signals_Signal2.__super__ = ash_signals_SignalBase;
ash_signals_Signal2.prototype = $extend(ash_signals_SignalBase.prototype,{
	dispatch: function(object1,object2) {
		this.startDispatch();
		var node = this.head;
		while(node != null) {
			node.listener(object1,object2);
			if(node.once) {
				this.remove(node.listener);
			}
			node = node.next;
		}
		this.endDispatch();
	}
	,__class__: ash_signals_Signal2
});
var ash_tools_ListIteratingSystem = function(nodeClass,nodeUpdateFunction,nodeAddedFunction,nodeRemovedFunction) {
	ash_core_System.call(this);
	this.nodeClass = nodeClass;
	this.nodeUpdateFunction = nodeUpdateFunction;
	this.nodeAddedFunction = nodeAddedFunction;
	this.nodeRemovedFunction = nodeRemovedFunction;
};
ash_tools_ListIteratingSystem.__name__ = ["ash","tools","ListIteratingSystem"];
ash_tools_ListIteratingSystem.__super__ = ash_core_System;
ash_tools_ListIteratingSystem.prototype = $extend(ash_core_System.prototype,{
	addToEngine: function(engine) {
		this.nodeList = engine.getNodeList(this.nodeClass);
		if(this.nodeAddedFunction != null) {
			var _g_previous = { next : this.nodeList.head};
			while(_g_previous.next != null) {
				var node = _g_previous.next;
				_g_previous = node;
				var node1 = node;
				this.nodeAddedFunction(node1);
			}
			this.nodeList.nodeAdded.add(this.nodeAddedFunction);
		}
		if(this.nodeRemovedFunction != null) {
			this.nodeList.nodeRemoved.add(this.nodeRemovedFunction);
		}
	}
	,removeFromEngine: function(engine) {
		if(this.nodeAddedFunction != null) {
			this.nodeList.nodeAdded.remove(this.nodeAddedFunction);
		}
		if(this.nodeRemovedFunction != null) {
			this.nodeList.nodeRemoved.remove(this.nodeRemovedFunction);
		}
		this.nodeList = null;
	}
	,update: function(time) {
		if(this.nodeUpdateFunction != null) {
			var _g_previous = { next : this.nodeList.head};
			while(_g_previous.next != null) {
				var node = _g_previous.next;
				_g_previous = node;
				var node1 = node;
				this.nodeUpdateFunction(node1,time);
			}
		}
	}
	,__class__: ash_tools_ListIteratingSystem
});
var gengine_Entity = function(node) {
	this._children = [];
	ash_core_Entity.call(this);
	if(node == null) {
		this.node = new Module.Node(gengine.getContext()); this.node.addRef();
	} else {
		this.node = node;
	}
};
gengine_Entity.__name__ = ["gengine","Entity"];
gengine_Entity.__super__ = ash_core_Entity;
gengine_Entity.prototype = $extend(ash_core_Entity.prototype,{
	add: function(component,componentClass) {
		if(js_Boot.__instanceof(component,gengine_components_UrhoComponent)) {
			this.node.addComponent((js_Boot.__cast(component , gengine_components_UrhoComponent)).object,0,0);
		}
		return ash_core_Entity.prototype.add.call(this,component,componentClass);
	}
	,remove: function(componentClass) {
		var component = ash_core_Entity.prototype.remove.call(this,componentClass);
		if(component != null && js_Boot.__instanceof(component,gengine_components_UrhoComponent)) {
			this.node.removeComponent((js_Boot.__cast(component , gengine_components_UrhoComponent)).object);
		}
		return component;
	}
	,set_position: function(position) {
		this.node.setPosition(position);
		return position;
	}
	,get_position: function() {
		return this.node.getPosition();
	}
	,set_scale: function(scale) {
		this.node.setScale(scale);
		return scale;
	}
	,get_scale: function() {
		return this.node.getScale();
	}
	,setPosition: function(position) {
		this.node.setPosition(position);
		return position;
	}
	,getPosition: function() {
		return this.node.getPosition();
	}
	,setScale: function(scale) {
		this.node.setScale(scale);
		return scale;
	}
	,getScale: function() {
		return this.node.getScale();
	}
	,setRotation2D: function(angle) {
		this.node.setRotation2D(angle);
	}
	,getRotation2D: function() {
		return this.node.getRotation2D();
	}
	,setDirection: function(direction) {
		this.node.setDirection(direction);
	}
	,getDirection: function() {
		return this.node.getDirection();
	}
	,getUp: function() {
		return this.node.getUp();
	}
	,getRight: function() {
		return this.node.getRight();
	}
	,setWorldPosition: function(position) {
		this.node.setWorldPosition(position);
	}
	,getWorldPosition: function() {
		return this.node.getWorldPosition();
	}
	,setWorldRotation2D: function(angle) {
		this.node.setWorldRotation2D(angle);
	}
	,getWorldRotation2D: function() {
		return this.node.getWorldRotation2D();
	}
	,setWorldScale: function(scale) {
		this.node.setWorldScale(scale);
	}
	,getWorldScale: function() {
		return this.node.getWorldScale();
	}
	,setParent: function(parent) {
		if(this._parent != null) {
			HxOverrides.remove(this._parent._children,this);
		}
		if(parent != null) {
			parent._children.push(this);
			this.node.setParent(parent.node);
			this._parent = parent;
		} else {
			this.node.setParent(null);
			this._parent = null;
		}
	}
	,getParent: function() {
		return this._parent;
	}
	,set_parent: function(parent) {
		if(this._parent != null) {
			HxOverrides.remove(this._parent._children,this);
		}
		if(parent != null) {
			parent._children.push(this);
			this.node.setParent(parent.node);
			this._parent = parent;
		} else {
			this.node.setParent(null);
			this._parent = null;
		}
		return parent;
	}
	,get_parent: function() {
		return this._parent;
	}
	,roll: function(angle,transformSpace) {
		if(transformSpace == null) {
			transformSpace = 0;
		}
		this.node.roll(angle,transformSpace);
	}
	,yaw: function(angle,transformSpace) {
		if(transformSpace == null) {
			transformSpace = 0;
		}
		this.node.yaw(angle,transformSpace);
	}
	,pitch: function(angle,transformSpace) {
		if(transformSpace == null) {
			transformSpace = 0;
		}
		this.node.pitch(angle,transformSpace);
	}
	,lookAt: function(position,upVector,transformSpace) {
		if(transformSpace == null) {
			transformSpace = 2;
		}
		if(upVector == null) {
			var this1 = Module.Vector3(0,1,0);
			upVector = this1;
		}
		this.node.lookAt(position,upVector,transformSpace);
	}
	,__class__: gengine_Entity
});
var gengine_Main = function() { };
gengine_Main.__name__ = ["gengine","Main"];
gengine_Main.main = function() {
	window.Main = gengine_Main;
};
gengine_Main.init = function() {
	console.log("[gengine] Initializing...");
	Application.init();
};
gengine_Main.start = function() {
	console.log("[gengine] Starting...");
	gengine_Main.engine = new ash_core_Engine();
	gengine_Main.engine.entityAdded.add(gengine_Main.onEntityAdded);
	gengine_Main.engine.entityRemoved.add(gengine_Main.onEntityRemoved);
	window.dummyNode = gengine.getScene().createChild(0, 0, false);
	window.dummyNode.setName('dummyNode');
	window.dummyNode.setEnabled(false);
	gengine_Main.engine.addSystem(new gengine_systems_Physics2DSystem(),1);
	Application.start(gengine_Main.engine);
};
gengine_Main.update = function(dt) {
	gengine_Main.engine.update(dt);
};
gengine_Main.onEntityAdded = function(entity) {
	var scene = gengine.getScene();
	var gentity = js_Boot.__cast(entity , gengine_Entity);
	if(gentity._parent == null) {
		scene.addChild(entity.node, 1000);
	}
	var r = entity.get(gengine_components_RigidBody2D);
	if(r != null) {
		gengine_systems_Physics2DSystem.addEntity(r.object,entity);
	}
	var _g = 0;
	var _g1 = gentity._children;
	while(_g < _g1.length) {
		var c = _g1[_g];
		++_g;
		gengine_Main.engine.addEntity(c);
	}
};
gengine_Main.onEntityRemoved = function(entity) {
	var scene = gengine.getScene();
	var gentity = js_Boot.__cast(entity , gengine_Entity);
	if(gentity._parent == null) {
		scene.removeChild(entity.node);
	}
	var _g = 0;
	var _g1 = gentity._children;
	while(_g < _g1.length) {
		var c = _g1[_g];
		++_g;
		gengine_Main.engine.removeEntity(c);
	}
};
gengine_Main.onGuiLoaded = function() {
	var app = Application;
	if(typeof app.onGuiLoaded === "function") { app.onGuiLoaded(); }
};
gengine_Main.onPhysicsBeginContact2D = function(idA,idB) {
	var app = Application;
	if(typeof app.onPhysicsBeginContact2D === "function") {
		var entityA = gengine_systems_Physics2DSystem.urhoBodyToEntity.h[idA];
		var entityB = gengine_systems_Physics2DSystem.urhoBodyToEntity.h[idB];
		app.onPhysicsBeginContact2D(entityA, entityB);
	}
};
var gengine_components_UrhoComponent = function() {
};
gengine_components_UrhoComponent.__name__ = ["gengine","components","UrhoComponent"];
gengine_components_UrhoComponent.prototype = {
	__class__: gengine_components_UrhoComponent
};
var gengine_components_Camera = function() {
	gengine_components_UrhoComponent.call(this);
	this.object = new Module.Camera(gengine.getContext());
	window.dummyNode.addComponent(this.object, 0, 0);
};
gengine_components_Camera.__name__ = ["gengine","components","Camera"];
gengine_components_Camera.__super__ = gengine_components_UrhoComponent;
gengine_components_Camera.prototype = $extend(gengine_components_UrhoComponent.prototype,{
	setOrthoSize: function(size) {
		this.object.setOrthoSize(size);
	}
	,setOrthographic: function(orthographic) {
		this.object.setOrthographic(orthographic);
	}
	,setNearClip: function(distance) {
		this.object.setNearClip(distance);
	}
	,setFarClip: function(distance) {
		this.object.setFarClip(distance);
	}
	,setFov: function(fov) {
		this.object.setFov(fov);
	}
	,setAspectRatio: function(ratio) {
		this.object.setAspectRatio(ratio);
	}
	,setAutoAspectRatio: function(autoAspectRatio) {
		this.object.setAutoAspectRatio(autoAspectRatio);
	}
	,setZoom: function(zoom) {
		this.object.setZoom(zoom);
	}
	,getZoom: function() {
		return this.object.getZoom();
	}
	,worldToScreenPoint: function(worldPoint) {
		return this.object.worldToScreenPoint(worldPoint);
	}
	,screenToWorldPoint: function(screenPoint) {
		return this.object.screenToWorldPoint(screenPoint);
	}
	,__class__: gengine_components_Camera
});
var gengine_components_CollisionShape2D = function() {
	gengine_components_UrhoComponent.call(this);
};
gengine_components_CollisionShape2D.__name__ = ["gengine","components","CollisionShape2D"];
gengine_components_CollisionShape2D.__super__ = gengine_components_UrhoComponent;
gengine_components_CollisionShape2D.prototype = $extend(gengine_components_UrhoComponent.prototype,{
	setDensity: function(density) {
		this.object.setDensity(density);
	}
	,setFriction: function(friction) {
		this.object.setFriction(friction);
	}
	,setRestitution: function(restitution) {
		this.object.setRestitution(restitution);
	}
	,setTrigger: function(trigger) {
		this.object.setTrigger(trigger);
	}
	,setCategoryBits: function(bits) {
		this.object.setCategoryBits(bits);
	}
	,setMaskBits: function(bits) {
		this.object.setMaskBits(bits);
	}
	,setGroupIndex: function(index) {
		this.object.setGroupIndex(index);
	}
	,__class__: gengine_components_CollisionShape2D
});
var gengine_components_CollisionBox2D = function() {
	gengine_components_CollisionShape2D.call(this);
	this.object = new Module.CollisionBox2D(gengine.getContext());
};
gengine_components_CollisionBox2D.__name__ = ["gengine","components","CollisionBox2D"];
gengine_components_CollisionBox2D.__super__ = gengine_components_CollisionShape2D;
gengine_components_CollisionBox2D.prototype = $extend(gengine_components_CollisionShape2D.prototype,{
	setSize: function(size) {
		this.object.setSize(size);
	}
	,setCenter: function(center) {
		this.object.setCenter(center);
	}
	,setAngle: function(angle) {
		this.object.setAngle(angle);
	}
	,__class__: gengine_components_CollisionBox2D
});
var gengine_components_PhysicsWorld2D = function() {
	gengine_components_UrhoComponent.call(this);
	this.object = new Module.PhysicsWorld2D(gengine.getContext());
};
gengine_components_PhysicsWorld2D.__name__ = ["gengine","components","PhysicsWorld2D"];
gengine_components_PhysicsWorld2D.__super__ = gengine_components_UrhoComponent;
gengine_components_PhysicsWorld2D.prototype = $extend(gengine_components_UrhoComponent.prototype,{
	setGravity: function(gravity) {
		this.object.setGravity(gravity);
	}
	,setContinuousPhysics: function(continuousPhysics) {
		this.object.setContinuousPhysics(continuousPhysics);
	}
	,setSubStepping: function(subStepping) {
		this.object.setSubStepping(subStepping);
	}
	,drawDebugGeometry: function() {
		this.object.drawDebugGeometry();
	}
	,raycastSingle: function(result,startPoint,endPoint,collisionMask) {
		if(collisionMask == null) {
			collisionMask = 4294967295;
		}
		this.object.raycastSingle(result,startPoint,endPoint,collisionMask);
	}
	,getEntity: function(point,collisionMask) {
		if(collisionMask == null) {
			collisionMask = 4294967295;
		}
		var urhoBody = this.object.getRigidBody(point,collisionMask);
		if(urhoBody == null) {
			return null;
		} else {
			return gengine_systems_Physics2DSystem.urhoBodyToEntity.get(urhoBody.getID());
		}
	}
	,__class__: gengine_components_PhysicsWorld2D
});
var gengine_components_RigidBody2D = function() {
	gengine_components_UrhoComponent.call(this);
	this.object = new Module.RigidBody2D(gengine.getContext());
};
gengine_components_RigidBody2D.__name__ = ["gengine","components","RigidBody2D"];
gengine_components_RigidBody2D.__super__ = gengine_components_UrhoComponent;
gengine_components_RigidBody2D.prototype = $extend(gengine_components_UrhoComponent.prototype,{
	setBodyType: function(bodyType) {
		this.object.setBodyType(bodyType);
	}
	,setMass: function(mass) {
		this.object.setMass(mass);
	}
	,setInertia: function(inertia) {
		this.object.setInertia(inertia);
	}
	,setMassCenter: function(center) {
		this.object.setMassCenter(center);
	}
	,setLinearDamping: function(linearDamping) {
		this.object.setLinearDamping(linearDamping);
	}
	,setAngularDamping: function(angularDamping) {
		this.object.setAngularDamping(angularDamping);
	}
	,setFixedRotation: function(fixedRotation) {
		this.object.setFixedRotation(fixedRotation);
	}
	,setBullet: function(bullet) {
		this.object.setBullet(bullet);
	}
	,setGravityScale: function(gravityScale) {
		this.object.setGravityScale(gravityScale);
	}
	,setLinearVelocity: function(linearVelocity) {
		this.object.setLinearVelocity(linearVelocity);
	}
	,setAngularVelocity: function(angularVelocity) {
		this.object.setAngularVelocity(angularVelocity);
	}
	,applyForce: function(force,point,wake) {
		this.object.applyForce(force,point,wake);
	}
	,applyForceToCenter: function(force,wake) {
		this.object.applyForceToCenter(force,wake);
	}
	,applyTorque: function(torque,wake) {
		this.object.applyTorque(torque,wake);
	}
	,applyLinearImpulse: function(impulse,point,wake) {
		this.object.applyLinearImpulse(impulse,point,wake);
	}
	,applyAngularImpulse: function(impulse,wake) {
		this.object.applyAngularImpulse(impulse,wake);
	}
	,__class__: gengine_components_RigidBody2D
});
var gengine_components_StaticSprite2D = function(sprite) {
	gengine_components_UrhoComponent.call(this);
	this.object = new Module.StaticSprite2D(gengine.getContext());
	window.dummyNode.addComponent(this.object, 0, 0);
	if(sprite != null) {
		this.object.setSprite(sprite);
	}
};
gengine_components_StaticSprite2D.__name__ = ["gengine","components","StaticSprite2D"];
gengine_components_StaticSprite2D.__super__ = gengine_components_UrhoComponent;
gengine_components_StaticSprite2D.prototype = $extend(gengine_components_UrhoComponent.prototype,{
	setSprite: function(sprite) {
		this.object.setSprite(sprite);
	}
	,setDrawRect: function(rect) {
		this.object.setDrawRect(rect);
	}
	,setTextureRect: function(rect) {
		this.object.setTextureRect(rect);
	}
	,getDrawRect: function() {
		return this.object.getDrawRect();
	}
	,getTextureRect: function() {
		return this.object.getTextureRect();
	}
	,setUseDrawRect: function(useDrawRect) {
		this.object.setUseDrawRect(useDrawRect);
	}
	,setUseTextureRect: function(useTextureRect) {
		this.object.setUseTextureRect(useTextureRect);
	}
	,getUseDrawRect: function() {
		return this.object.getUseDrawRect();
	}
	,getUseTextureRect: function() {
		return this.object.getUseTextureRect();
	}
	,setLayer: function(layer) {
		this.object.setLayer(layer);
	}
	,getLayer: function() {
		return this.object.getLayer();
	}
	,setOrderInLayer: function(order) {
		this.object.setOrderInLayer(order);
	}
	,getOrderInLayer: function() {
		return this.object.getOrderInLayer();
	}
	,setHotSpot: function(hotSpot) {
		this.object.setHotSpot(hotSpot);
	}
	,setUseHotSpot: function(useHotSpot) {
		this.object.setUseHotSpot(useHotSpot);
	}
	,setColor: function(color) {
		this.object.setColor(color);
	}
	,setAlpha: function(alpha) {
		this.object.setAlpha(alpha);
	}
	,__class__: gengine_components_StaticSprite2D
});
var gengine_math__$Vector2_Vector2_$Impl_$ = {};
gengine_math__$Vector2_Vector2_$Impl_$.__name__ = ["gengine","math","_Vector2","Vector2_Impl_"];
gengine_math__$Vector2_Vector2_$Impl_$._new = function(x,y) {
	var this1 = Module.Vector2(x,y);
	return this1;
};
gengine_math__$Vector2_Vector2_$Impl_$.mul = function(a,b) {
	var this1 = Module.Vector2(a.x * b,a.y * b);
	return this1;
};
gengine_math__$Vector2_Vector2_$Impl_$.div = function(a,b) {
	var this1 = Module.Vector2(a.x / b,a.y / b);
	return this1;
};
gengine_math__$Vector2_Vector2_$Impl_$.add = function(a,b) {
	var this1 = Module.Vector2(a.x + b.x,a.y + b.y);
	return this1;
};
gengine_math__$Vector2_Vector2_$Impl_$.min = function(a,b) {
	var this1 = Module.Vector2(a.x - b.x,a.y - b.y);
	return this1;
};
var gengine_math__$Vector3_Vector3_$Impl_$ = {};
gengine_math__$Vector3_Vector3_$Impl_$.__name__ = ["gengine","math","_Vector3","Vector3_Impl_"];
gengine_math__$Vector3_Vector3_$Impl_$._new = function(x,y,z) {
	var this1 = Module.Vector3(x,y,z);
	return this1;
};
gengine_math__$Vector3_Vector3_$Impl_$.mul = function(a,b) {
	var this1 = Module.Vector3(a.x * b,a.y * b,a.z * b);
	return this1;
};
gengine_math__$Vector3_Vector3_$Impl_$.div = function(a,b) {
	var this1 = Module.Vector3(a.x / b,a.y / b,a.z / b);
	return this1;
};
gengine_math__$Vector3_Vector3_$Impl_$.add = function(a,b) {
	var this1 = Module.Vector3(a.x + b.x,a.y + b.y,a.z + b.z);
	return this1;
};
gengine_math__$Vector3_Vector3_$Impl_$.min = function(a,b) {
	var this1 = Module.Vector3(a.x - b.x,a.y - b.y,a.z - b.z);
	return this1;
};
var gengine_nodes_Physics2DNode = function() { };
gengine_nodes_Physics2DNode.__name__ = ["gengine","nodes","Physics2DNode"];
gengine_nodes_Physics2DNode._getComponents = function() {
	if(gengine_nodes_Physics2DNode._components == null) {
		gengine_nodes_Physics2DNode._components = new ash_ClassMap();
		var _this = gengine_nodes_Physics2DNode._components;
		var k = gengine_components_RigidBody2D;
		var name = Type.getClassName(k);
		var _this1 = _this.keyMap;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,k);
		} else {
			_this1.h[name] = k;
		}
		var _this2 = _this.valueMap;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,"body");
		} else {
			_this2.h[name] = "body";
		}
	}
	return gengine_nodes_Physics2DNode._components;
};
gengine_nodes_Physics2DNode.__super__ = ash_core_Node;
gengine_nodes_Physics2DNode.prototype = $extend(ash_core_Node.prototype,{
	__class__: gengine_nodes_Physics2DNode
});
var gengine_systems_Physics2DSystem = function() {
	ash_tools_ListIteratingSystem.call(this,gengine_nodes_Physics2DNode,null,null,$bind(this,this.onNodeRemoved));
};
gengine_systems_Physics2DSystem.__name__ = ["gengine","systems","Physics2DSystem"];
gengine_systems_Physics2DSystem.addEntity = function(urhoBody,entity) {
	var this1 = gengine_systems_Physics2DSystem.urhoBodyToEntity;
	var key = urhoBody.getID();
	this1.h[key] = entity;
};
gengine_systems_Physics2DSystem.getEntity = function(urhoBody) {
	if(urhoBody == null) {
		return null;
	} else {
		var this1 = gengine_systems_Physics2DSystem.urhoBodyToEntity;
		var key = urhoBody.getID();
		return this1.h[key];
	}
};
gengine_systems_Physics2DSystem.__super__ = ash_tools_ListIteratingSystem;
gengine_systems_Physics2DSystem.prototype = $extend(ash_tools_ListIteratingSystem.prototype,{
	onNodeRemoved: function(node) {
		gengine_systems_Physics2DSystem.urhoBodyToEntity.remove(node.body.object.getID());
	}
	,__class__: gengine_systems_Physics2DSystem
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var keys = this.arrayKeys();
		var _g1 = 0;
		var _g = keys.length;
		while(_g1 < _g) {
			var i = _g1++;
			var k = keys[i];
			s_b += k == null ? "null" : "" + k;
			s_b += " => ";
			s_b += Std.string(Std.string(__map_reserved[k] != null ? this.getReserved(k) : this.h[k]));
			if(i < keys.length - 1) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_StringMap
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
ash_core_Entity.nameCount = 0;
gengine_systems_Physics2DSystem.urhoBodyToEntity = new haxe_ds_IntMap();
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
gengine_Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
